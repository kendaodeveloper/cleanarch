plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.5'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'jacoco'
}

allprojects {
    apply plugin: "java"
    apply plugin: "org.springframework.boot"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "jacoco"

    group = 'com.example'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '17'
    targetCompatibility = '17'

    bootJar {
        mainClass = "**Application"
    }

    repositories {
        mavenCentral()
    }
}

project(":entity") {
    dependencies {
        implementation 'org.springframework:spring-context'
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
    }
}

project(":usecasebase") {
    dependencies {
        implementation project(":entity")

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
    }
}

project(":gatewaybase") {
    dependencies {
        implementation project(":entity")

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
    }
}

project(":entrypointapi") {
    dependencies {
        implementation project(":entity")
        implementation project(":usecasebase")

        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        // implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'javax.validation:validation-api:2.0.1.Final'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springdoc:springdoc-openapi-ui:1.6.12'
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        // testImplementation 'org.springframework.security:spring-security-test'
    }
}

project(":entrypointwebpage") {
    dependencies {
        implementation project(":entity")
        implementation project(":usecasebase")

        implementation 'org.springframework.boot:spring-boot-starter-web'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }
}

project(":entrypointworker") {
    dependencies {
        implementation project(":entity")
        implementation project(":usecasebase")

        implementation 'org.springframework.boot:spring-boot-starter'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }
}

project(":entrypointeventmanager") {
    dependencies {
        implementation project(":entity")
        implementation project(":usecasebase")

        implementation 'org.springframework.boot:spring-boot-starter'
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }
}

project(":usecaseimpl") {
    dependencies {
        implementation project(":entity")
        implementation project(":usecasebase")
        implementation project(":gatewaybase")

        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'javax.transaction:javax.transaction-api:1.3'
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }
}

project(":gatewayapi") {
    dependencies {
        implementation project(":entity")
        implementation project(":gatewaybase")

        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
        implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:3.1.5'
        // implementation 'io.github.openfeign:feign-okhttp'
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'io.projectreactor:reactor-test'
    }
}

project(":gatewaydatabase") {
    dependencies {
        implementation project(":entity")
        implementation project(":gatewaybase")

        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        // implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
        implementation 'org.flywaydb:flyway-core'
        runtimeOnly 'org.postgresql:postgresql'
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        // testImplementation 'io.projectreactor:reactor-test'
    }
}

project(":gatewaymessagebroker") {
    dependencies {
        implementation project(":entity")
        implementation project(":gatewaybase")

        implementation 'org.springframework.boot:spring-boot-starter'
        // implementation 'org.springframework.boot:spring-boot-starter-amqp'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        // testImplementation 'org.springframework.amqp:spring-rabbit-test'
    }
}

project(":gatewaystorage") {
    dependencies {
        implementation project(":entity")
        implementation project(":gatewaybase")

        implementation 'org.springframework.boot:spring-boot-starter'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }
}

project(":gatewayeventmanager") {
    dependencies {
        implementation project(":entity")
        implementation project(":gatewaybase")

        implementation 'org.springframework.boot:spring-boot-starter'
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }
}

project(":start") {
    dependencies {
        implementation project(":entity")
        implementation project(":gatewaybase")
        implementation project(":gatewayapi")
        implementation project(":gatewaydatabase")
        implementation project(":gatewaymessagebroker")
        implementation project(":gatewaystorage")
        implementation project(":gatewayeventmanager")
        implementation project(":usecasebase")
        implementation project(":usecaseimpl")
        implementation project(":entrypointapi")
        implementation project(":entrypointwebpage")
        implementation project(":entrypointworker")
        implementation project(":entrypointeventmanager")

        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:3.1.5'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.8"
}

task jacocoMergeAll(type: JacocoMerge) {
    dependsOn(subprojects.test, subprojects.jacocoTestReport)

    subprojects.each { subproject ->
        // include subproject with tests
        // if (subproject.name == 'start' || subproject.name == 'entrypointimpl' || subproject.name == 'usecaseimpl' || subproject.name == 'gatewayimpl') {
        executionData subproject.tasks.withType(Test)
        // }
    }
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    dependsOn(jacocoMergeAll)

    additionalSourceDirs.from = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.from = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(subprojects.sourceSets.main.output)
    executionData.from = files("${buildDir}/jacoco/jacocoMergeAll.exec")

    reports {
        html {
            enabled = true
            destination = file("${buildDir}/jacoco/html")
        }
        xml {
            enabled = true
            destination = file("${buildDir}/jacoco/report.xml")
        }
        csv.enabled = false
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/dto/**',
                    '**/entity/**',
                    '**/table/**',
                    '**/client/**',
                    '**/request/**',
                    '**/response/**',
                    '**/enumerable/**',
                    '**/configuration/**',
                    '**/advice/**',
                    '**/swagger/**',
                    '**Application.java',
                    '**Application.class'
            ])
        }))
    }
}
